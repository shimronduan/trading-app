name: Deploy Trading App to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_BINANCE_API_KEY: ${{ secrets.NEXT_PUBLIC_BINANCE_API_KEY }}
        BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
        NEXT_PUBLIC_AZURE_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_AZURE_API_BASE_URL }}
        NEXT_PUBLIC_AZURE_API_KEY: ${{ secrets.NEXT_PUBLIC_AZURE_API_KEY }}
        NEXT_PUBLIC_USE_MOCK_DATA: ${{ secrets.NEXT_PUBLIC_USE_MOCK_DATA }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          package.json
          package-lock.json
          public/
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az --version

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Azure Login
      run: |
        echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
        az login --service-principal \
          --username $(jq -r .clientId azure-credentials.json) \
          --password $(jq -r .clientSecret azure-credentials.json) \
          --tenant $(jq -r .tenantId azure-credentials.json)
        az account set --subscription $(jq -r .subscriptionId azure-credentials.json)
        rm azure-credentials.json

    - name: Setup Terraform Authentication
      run: |
        echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
        echo "ARM_CLIENT_ID=$(jq -r .clientId azure-credentials.json)" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret azure-credentials.json)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure-credentials.json)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(jq -r .tenantId azure-credentials.json)" >> $GITHUB_ENV
        rm azure-credentials.json

    - name: Terraform Init
      working-directory: ./infra
      run: terraform init

    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan -var-file="main.tfvars.json"
      env:
        TF_VAR_environment_name: ${{ vars.AZURE_ENV_NAME }}
        TF_VAR_location: ${{ vars.AZURE_LOCATION }}
        TF_VAR_binance_api_key: ${{ secrets.NEXT_PUBLIC_BINANCE_API_KEY }}
        TF_VAR_binance_api_secret: ${{ secrets.BINANCE_API_SECRET }}
        TF_VAR_azure_api_base_url: ${{ secrets.NEXT_PUBLIC_AZURE_API_BASE_URL }}
        TF_VAR_azure_api_key: ${{ secrets.NEXT_PUBLIC_AZURE_API_KEY }}
        TF_VAR_use_mock_data: ${{ secrets.NEXT_PUBLIC_USE_MOCK_DATA }}

    - name: Terraform Apply
      working-directory: ./infra
      run: terraform apply -auto-approve -var-file="main.tfvars.json"
      env:
        TF_VAR_environment_name: ${{ vars.AZURE_ENV_NAME }}
        TF_VAR_location: ${{ vars.AZURE_LOCATION }}
        TF_VAR_binance_api_key: ${{ secrets.NEXT_PUBLIC_BINANCE_API_KEY }}
        TF_VAR_binance_api_secret: ${{ secrets.BINANCE_API_SECRET }}
        TF_VAR_azure_api_base_url: ${{ secrets.NEXT_PUBLIC_AZURE_API_BASE_URL }}
        TF_VAR_azure_api_key: ${{ secrets.NEXT_PUBLIC_AZURE_API_KEY }}
        TF_VAR_use_mock_data: ${{ secrets.NEXT_PUBLIC_USE_MOCK_DATA }}

    - name: Deploy Application
      run: |
        # Get the app service name from Terraform output
        APP_NAME=$(cd infra && terraform output -raw SERVICE_TRADING_APP_NAME)
        
        # Create deployment package
        zip -r app.zip .next package.json package-lock.json public
        
        # Deploy to App Service
        az webapp deployment source config-zip \
          --resource-group rg-${{ vars.AZURE_ENV_NAME }} \
          --name $APP_NAME \
          --src app.zip
